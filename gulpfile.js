/**
 * GULP file for Vector Screencast project
 * @author	Šimon Rozsíval
 * @contact	simon@roszival.com
 * @licence	MIT 
 */
 
var concat = require('gulp-concat');
var del = require("del");
var fs = require("fs");
var gulp = require("gulp");
var less = require("gulp-less");
var sourcemaps = require('gulp-sourcemaps');
var merge = require('merge-stream');
var minifyCSS = require('gulp-minify-css');
var path = require("path");
var rename = require('gulp-rename');
var tsc = require('gulp-tsc');
var uglify = require('gulp-uglify');
var ignore = require('gulp-ignore');
var typedoc = require('gulp-typedoc');

/**
 * Remove all files generated by gulp in all default tasks
 */

gulp.task("clean-release", function() {
	del([ 
		"./release/**/*", // everything in the release directory should be deleted
	]);	
});

gulp.task("clean-demo", function() {
	// the DEMO needs some cherry picking:		
	del([ 
		// themes
		"./demo/public/css/themes",
		// lib
		"./demo/public/js/libs/" + libProject.compilerOptions.out,
		"./demo/public/js/libs/" + libProject.compilerOptions.out + ".map",
		// compile-less		
		"./demo/public/js/workers/**/*",
		// audio-server
		"./demo/" + audioServerProject.compilerOptions.out,
		"./demo/" + audioServerProject.compilerOptions.out + ".map",		
	]);	
});

gulp.task("clean-doc", function() {
	del([
		"./docs/**/*", // delete everything in docs directory
	])
});

gulp.task("clean", ["clean-release", "clean-demo", "clean-doc"]);

/**
 * Gulp task for transpiling .LESS files into .CSS
 * For every subdirectory in ./public/themes, all it's *.less files are merged into one,
 * they are transpiled into a css, this css is minified and then saved into ./public/themes/<foldername>.min.css,
 * where <foldername> is the name of the theme's subdirectory.
 * This task is based on https://github.com/gulpjs/gulp/blob/master/docs/recipes/running-task-steps-per-folder.md
 */

function getFolders(dir) {
    return fs.readdirSync(dir)
		      .filter(function(file) {
		        return fs.statSync(path.join(dir, file)).isDirectory();
		      });
}

var themesPath = "./src/Themes"; 
gulp.task("themes", function() {
   var folders = getFolders(themesPath);
   var tasks = folders.map(function(folder) {
	  return gulp.src(path.join(themesPath, folder, "theme.less"))
  				.pipe(less())
				.pipe(minifyCSS())
        		.pipe(rename(folder + '.min.css'))				
				.pipe(gulp.dest("./release/themes"));				
   });

   return merge(tasks);
});

gulp.task("themes-demo", function() {
   var folders = getFolders(themesPath);
   var tasks = folders.map(function(folder) {
	  return gulp.src(path.join(themesPath, folder, "theme.less"))
  				.pipe(sourcemaps.init())
				.pipe(less())
  				.pipe(sourcemaps.write())
        		.pipe(rename(folder + '.min.css'))
				.pipe(gulp.dest("./demo/public/css/themes"));
   });

   return merge(tasks);	
});

/**
 * Compile the VectorScreencast JavaScript library
 * The source of VectorScreencast is written in TypeScript and must be transpiled to pure Javascript.
 */


var libProject = require("./src/VectorScreencast/tsconfig.json", { sourceMap: false }); // source maps are irrelevant for the release version

//
// A) for release
//
 
gulp.task("vector-screencast-release", function() {
	return gulp.src("./src/VectorScreencast/lib.ts")
			.pipe(tsc(libProject.compilerOptions))
			.pipe(ignore.exclude([ "**/*.map" ])) // do not uglify .map files
			.pipe(uglify())
			.pipe(gulp.dest("./release/vector-screencast-lib"));
});

gulp.task("lib-release", ["vector-screencast-release"]);

//
// B) for the demo
//

gulp.task("copy-source-for-sourcemaps", function () {
	return gulp.src("./src/VectorScreencast/**/*")
				.pipe(gulp.dest("./demo/public/js/src/VectorScreencast/"));
});

gulp.task("vector-screencast-demo", ["copy-source-for-sourcemaps"], function() {
	return gulp.src("./src/VectorScreencast/VectorScreencast.ts")
			.pipe(sourcemaps.init())
			.pipe(tsc(libProject.compilerOptions))
			.pipe(sourcemaps.write("./demo/public/js/libs"))
			.pipe(gulp.dest("./demo/public/js/libs"));
});

gulp.task("lib-demo", ["vector-screencast-demo"]);


/**
 * Compile the VectorScreencast JavaScript library
 * The source of VectorScreencast is written in TypeScript and must be transpiled to pure Javascript.
 */
var workersProject = require("./src/AudioRecordingWorkers/tsconfig.json");

gulp.task("workers", function() {	
	return gulp.src("./src/AudioRecordingWorkers/**/*.ts")
						.pipe(tsc(workersProject.compilerOptions))
						.pipe(gulp.dest("./release/workers"));
});

gulp.task("workers-demo", function() {	
	return gulp.src("./src/AudioRecordingWorkers/**/*.ts")
						.pipe(tsc(workersProject.compilerOptions))
						.pipe(gulp.dest("./demo/public/js/workers"));
});

/**
 * Compile the Audio recording server
 * The Audio recording server is written in TypeScript and must be transpiled to pure JavaScript.
 */
var audioServerProject = require("./src/AudioServer/tsconfig.json");
gulp.task("audio-server", function(cb) {	
	return gulp.src("./src/AudioServer/**/*.ts")
					.pipe(tsc(audioServerProject.compilerOptions))
					.pipe(gulp.dest("./release/audio-server"));
});

gulp.task("audio-server-demo", function(cb) {	
	return gulp.src("./src/AudioServer/**/*.ts")
					.pipe(tsc(audioServerProject.compilerOptions))
					.pipe(gulp.dest("./demo/"));
});


/**
 * Main tasks:
 */

gulp.task("demo", ["clean-demo", "audio-server-demo", "lib-demo", "themes-demo", "workers-demo"]);
gulp.task("release", ["clean-release", "audio-server", "lib-release", "themes"]);
gulp.task("doc", function() {
	return gulp.src("./src/VectorScreencast/**/*.ts")
					.pipe(typedoc({
						out: "./docs/",
						target: "ES5",
						module: "commonjs",
						mode: "file",
						name: "Vector Screencast",
						theme: "default"						
					}));
});

// default: compile both the JS library and the server
gulp.task("default", ["release", "demo", "doc"]);
