{"version":3,"sources":["webpack:///./src/lib/Player.ts","webpack:///./src/lib/UI/PlayerUI.ts","webpack:///./src/lib/UI/TimeLine.ts"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA8D,qBAAqB,EAAE;AACrF,+DAA8D,sBAAsB,EAAE;AACtF,kEAAiE,sBAAsB,EAAE;AACzF,0EAAyE,iCAAiC,EAAE;AAC5G,0EAAyE,4CAA4C,EAAE;AACvH,wEAAuE,+BAA+B,EAAE;AACxG,+EAA8E,4BAA4B,EAAE;AAC5G;AACA;AACA;AACA,UAAS;AACT;AACA,wEAAuE,qBAAqB,EAAE;AAC9F,yEAAwE,sBAAsB,EAAE;AAChG;AACA,sFAAqF,wDAAwD,EAAE;AAC/I,2EAA0E,6CAA6C,EAAE;AACzH,+FAA8F,+DAA+D,EAAE;AAC/J;AACA;AACA;AACA;AACA;AACA,4CAA2C,uCAAuC;AAClF,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,2BAA0B,oBAAoB,EAAE;AAChD;AACA;AACA,MAAK;AACL;AACA,2BAA0B,wBAAwB,EAAE;AACpD;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D,qBAAqB,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA0D,qBAAqB,EAAE;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D;;;;;;;;ACzRA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAwE,6BAA6B,EAAE;AACvG,yEAAwE,6BAA6B,EAAE;AACvG,4EAA2E,2BAA2B,EAAE;AACxG,0EAAyE,uBAAuB,EAAE;AAClG,gFAA+E,2DAA2D,EAAE;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA,wHAAuH,iCAAiC,EAAE;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,uFAAsF,iDAAiD,EAAE;AACzI;AACA;AACA;AACA,uDAAsD,2BAA2B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,0BAA0B;AACzE;AACA;AACA;AACA;AACA,sHAAqH,0BAA0B,EAAE;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAoD,kCAAkC,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mJAAkJ,2BAA2B,EAAE,uHAAuH,yBAAyB,EAAE,qHAAqH,qBAAqB,EAAE;AAC7c;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAwE,uBAAuB;AAC/F,uEAAsE,uBAAuB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D;;;;;;;;ACnNA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAA+C,yBAAyB;AACxE,oDAAmD,6BAA6B;AAChF;AACA;AACA,iCAAgC,sBAAsB,EAAE;AACxD;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;AACD,+CAA8C,cAAc;AAC5D","file":"player.js","sourcesContent":["var AudioPlayer_1 = require('./AudioData/AudioPlayer');\nvar VideoEvents_1 = require('./Helpers/VideoEvents');\nvar Errors_1 = require('./Helpers/Errors');\nvar PlayerUI_1 = require('./UI/PlayerUI');\nvar VideoTimer_1 = require('./Helpers/VideoTimer');\nvar CanvasDrawer_1 = require('./Drawing/CanvasDrawer');\nvar Command_1 = require('./VideoData/Command');\nvar Chunk_1 = require('./VideoData/Chunk');\nvar File_1 = require('./Helpers/File');\nvar IO_1 = require('./VideoFormat/SVGAnimation/IO');\nvar ComponentContainer_1 = require('./Components/ComponentContainer');\nvar Player = (function () {\n    function Player(id, settings) {\n        var _this = this;\n        this.settings = settings;\n        this.lastMouseMoveState = null;\n        this.events = new VideoEvents_1.default();\n        var e = this.events;\n        var container = document.getElementById(id);\n        if (!container) {\n            Errors_1.default.Report(Errors_1.ErrorType.Fatal, \"Container #\" + id + \" doesn't exist. Video Player couldn't be initialised.\");\n        }\n        while (!!container.firstChild) {\n            container.removeChild(container.firstChild);\n        }\n        if (!settings.Localization) {\n            var loc = {\n                NoJS: \"Your browser does not support JavaScript or it is turned off. Video can't be recorded without enabled JavaScript in your browser.\",\n                DataLoadingFailed: \"Unfortunatelly, downloading data failed.\",\n                DataIsCorrupted: \"This video can't be played, the data is corrupted.\",\n                ControlPlayback: \"Play/Pause video\",\n                Play: \"Play\",\n                Pause: \"Pause\",\n                Replay: \"Replay\",\n                TimeStatus: \"Video progress\",\n                VolumeControl: \"Volume controls\",\n                VolumeUp: \"Volume up\",\n                VolumeDown: \"Volume down\",\n                Mute: \"Mute\",\n                Busy: \"Loading...\"\n            };\n            settings.Localization = loc;\n        }\n        this.timer = new VideoTimer_1.default(false);\n        this.ui = !!settings.UI ? settings.UI : new PlayerUI_1.default(id, this.events);\n        this.ui.Timer = this.timer;\n        this.ui.Localization = settings.Localization;\n        if (!!settings.ShowControls) {\n            this.ui.CreateControls(!!settings.Autohide);\n        }\n        this.drawer = !!settings.DrawingStrategy ? settings.DrawingStrategy : new CanvasDrawer_1.default(true);\n        this.drawer.SetEvents(this.events);\n        this.ui.AcceptCanvas(this.drawer.CreateCanvas());\n        container.appendChild(this.ui.GetHTML());\n        e.on(VideoEvents_1.VideoEventType.Start, function () { return _this.Play(); });\n        e.on(VideoEvents_1.VideoEventType.Pause, function () { return _this.Pause(); });\n        e.on(VideoEvents_1.VideoEventType.ReachEnd, function () { return _this.Pause(); });\n        e.on(VideoEvents_1.VideoEventType.ClearCanvas, function (color) { return _this.ClearCavnas(color); });\n        e.on(VideoEvents_1.VideoEventType.ChangeColor, function (color) { return _this.drawer.SetCurrentColor(color); });\n        e.on(VideoEvents_1.VideoEventType.JumpTo, function (progress) { return _this.JumpTo(progress); });\n        this.events.on(VideoEvents_1.VideoEventType.DrawSegment, function () { return _this.DrawSegment(); });\n        this.events.on(VideoEvents_1.VideoEventType.DrawPath, function (path) {\n            _this.drawnPath.DrawWholePath();\n            _this.drawnPath = null;\n        });\n        this.busyLevel = 0;\n        this.events.on(VideoEvents_1.VideoEventType.Busy, function () { return _this.Busy(); });\n        this.events.on(VideoEvents_1.VideoEventType.Ready, function () { return _this.Ready(); });\n        this.components = new ComponentContainer_1.default(this.ui);\n        e.on(VideoEvents_1.VideoEventType.AddComponent, function (type, id, params) { return _this.components.AddComponent(type, id, params); });\n        e.on(VideoEvents_1.VideoEventType.RemoveComponent, function (id) { return _this.components.RemoveComponent(id); });\n        e.on(VideoEvents_1.VideoEventType.ComponentCommand, function (targetId, cmd, params) { return _this.components.ExecuteCommand(targetId, cmd, params); });\n        this.ui.SetBusyText(settings.Localization.Busy);\n        this.events.trigger(VideoEvents_1.VideoEventType.Busy);\n        File_1.default.ReadFileAsync(settings.Source, function (file) {\n            _this.ProcessVideoData(file);\n            _this.MonitorResize(container);\n            window.onresize = function () { return _this.MonitorResize(container); };\n        }, function (errStatusCode) {\n            Errors_1.default.Report(Errors_1.ErrorType.Warning, _this.settings.Localization.DataLoadingFailed);\n            _this.ui.SetBusyText(settings.Localization.DataLoadingFailed);\n        });\n    }\n    Object.defineProperty(Player.prototype, \"Events\", {\n        get: function () { return this.events; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Player.prototype, \"Components\", {\n        get: function () { return this.components; },\n        enumerable: true,\n        configurable: true\n    });\n    Player.prototype.MonitorResize = function (container) {\n        var rect = container.getBoundingClientRect();\n        if (rect.width !== this.oldWidth || rect.height !== this.oldHeight) {\n            this.drawer.Stretch();\n            var scalingFactor = this.drawer.SetupOutputCorrection(this.video.Metadata.Width, this.video.Metadata.Height);\n            this.events.trigger(VideoEvents_1.VideoEventType.CanvasScalingFactor, scalingFactor);\n            if (!!this.video) {\n                this.RedrawCurrentScreen();\n            }\n            this.oldWidth = rect.width;\n            this.oldHeight = rect.height;\n        }\n    };\n    Player.prototype.ProcessVideoData = function (data) {\n        try {\n            var reader = !!this.settings.VideoFormat ? this.settings.VideoFormat : new IO_1.default();\n            this.video = reader.LoadVideo(this.events, data);\n            reader = null;\n            this.audio = new AudioPlayer_1.default(this.events, this.video.Metadata.AudioTracks);\n        }\n        catch (e) {\n            reader = null;\n            this.video = null;\n            this.audio = null;\n            this.ui.SetBusyText(this.settings.Localization.DataIsCorrupted);\n            return;\n        }\n        this.events.trigger(VideoEvents_1.VideoEventType.VideoInfoLoaded, this.video.Metadata);\n        this.video.RewindMinusOne();\n        this.MoveToNextChunk();\n        this.events.trigger(VideoEvents_1.VideoEventType.Ready);\n        if (!!this.settings.Autoplay) {\n            this.events.trigger(VideoEvents_1.VideoEventType.Start);\n        }\n    };\n    Player.prototype.Play = function () {\n        var _this = this;\n        this.isPlaying = true;\n        this.timer.Resume();\n        !!this.audio && this.audio.Play();\n        this.ticking = requestAnimationFrame(function () { return _this.Tick(); });\n    };\n    Player.prototype.Pause = function () {\n        this.timer.Pause();\n        this.isPlaying = false;\n        !!this.audio && this.audio.Pause();\n        cancelAnimationFrame(this.ticking);\n    };\n    Player.prototype.Tick = function () {\n        var _this = this;\n        this.Sync();\n        this.ticking = requestAnimationFrame(function () { return _this.Tick(); });\n    };\n    Player.prototype.Sync = function () {\n        while (!!this.video.CurrentChunk) {\n            if (this.video.CurrentChunk.CurrentCommand === undefined) {\n                if (!!this.drawnPath) {\n                    this.drawnPath.Draw();\n                }\n                this.MoveToNextChunk();\n                if (!this.video.CurrentChunk\n                    || !this.video.CurrentChunk.CurrentCommand) {\n                    if (this.timer.CurrentTime() >= this.video.Metadata.Length) {\n                        this.ReachedEnd();\n                    }\n                    break;\n                }\n            }\n            if (this.video.CurrentChunk.CurrentCommand.Time > this.timer.CurrentTime()) {\n                break;\n            }\n            if (this.video.CurrentChunk.CurrentCommand instanceof Command_1.MoveCursor) {\n                this.lastMouseMoveState = this.video.CurrentChunk.CurrentCommand;\n            }\n            else {\n                this.video.CurrentChunk.CurrentCommand.Execute(this.events);\n            }\n            this.video.CurrentChunk.MoveNextCommand();\n        }\n        if (this.lastMouseMoveState !== null) {\n            this.lastMouseMoveState.Execute(this.events);\n            this.lastMouseMoveState = null;\n        }\n        if (this.drawnPath !== null) {\n            this.drawnPath.Draw();\n        }\n    };\n    Player.prototype.MoveToNextChunk = function () {\n        do {\n            this.video.MoveNextChunk();\n            if (!this.video.CurrentChunk) {\n                this.ReachedEnd();\n                break;\n            }\n            this.video.CurrentChunk.ExecuteInitCommands(this.events);\n            if (this.video.CurrentChunk instanceof Chunk_1.PathChunk) {\n                this.drawnPath = this.drawer.CreatePath(this.events);\n                var path = this.video.CurrentChunk.Path;\n                this.drawnPath.Segments = path.Segments;\n                this.drawnPath.Color = path.Color;\n                this.drawnSegment = 0;\n                path = this.drawnPath;\n            }\n            else {\n                this.drawnPath = null;\n            }\n            if (this.video.PeekNextChunk()\n                && this.video.PeekNextChunk().StartTime <= this.timer.CurrentTime()) {\n                this.video.CurrentChunk.Render(this.events);\n            }\n            else {\n                break;\n            }\n        } while (true);\n    };\n    Player.prototype.JumpTo = function (progress) {\n        var wasPlaying = this.isPlaying;\n        var time = progress * this.video.Metadata.Length;\n        var videoTime = this.timer.CurrentTime();\n        this.timer.SetTime(time);\n        this.audio.JumpTo(progress);\n        if (this.isPlaying) {\n            this.events.trigger(VideoEvents_1.VideoEventType.Pause);\n        }\n        var startChunk = 0;\n        if (time >= videoTime) {\n            startChunk = this.video.FastforwardErasedChunksUntil(time);\n        }\n        else {\n            startChunk = this.video.RewindToLastEraseBefore(time);\n        }\n        if (startChunk !== this.video.CurrentChunkNumber) {\n            this.video.SetCurrentChunkNumber = startChunk - 1;\n            this.MoveToNextChunk();\n        }\n        this.Sync();\n        this.ui.UpdateCurrentTime();\n        if (wasPlaying === true) {\n            this.events.trigger(VideoEvents_1.VideoEventType.Start);\n        }\n    };\n    Player.prototype.RedrawCurrentScreen = function () {\n        var wasPlaying = this.isPlaying;\n        if (this.isPlaying) {\n            this.events.trigger(VideoEvents_1.VideoEventType.Pause);\n        }\n        var startChunk = 0;\n        startChunk = this.video.RewindToLastEraseBefore(this.timer.CurrentTime());\n        this.video.SetCurrentChunkNumber = startChunk - 1;\n        this.MoveToNextChunk();\n        this.Sync();\n        if (wasPlaying === true) {\n            this.events.trigger(VideoEvents_1.VideoEventType.Start);\n        }\n    };\n    Player.prototype.ReachedEnd = function () {\n        this.events.trigger(VideoEvents_1.VideoEventType.ReachEnd);\n    };\n    Player.prototype.ClearCavnas = function (color) {\n        this.drawer.ClearCanvas(color);\n    };\n    Player.prototype.DrawSegment = function () {\n        if (this.drawnSegment === 0) {\n            this.drawnPath.StartDrawingPath(this.drawnPath.Segments[0]);\n            this.drawnSegment++;\n        }\n        else {\n            this.drawnPath.DrawSegment(this.drawnPath.Segments[this.drawnSegment++]);\n        }\n    };\n    Player.prototype.Busy = function () {\n        this.busyLevel++;\n        this.wasPlayingWhenBusy = this.wasPlayingWhenBusy || this.isPlaying;\n        this.events.trigger(VideoEvents_1.VideoEventType.Pause);\n        this.ui.Busy();\n    };\n    Player.prototype.Ready = function () {\n        if (--this.busyLevel === 0) {\n            if (this.wasPlayingWhenBusy === true) {\n                this.events.trigger(VideoEvents_1.VideoEventType.Start);\n                this.wasPlayingWhenBusy = false;\n            }\n            this.ui.Ready();\n        }\n    };\n    return Player;\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Player;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/lib/Player.ts\n ** module id = 0\n ** module chunks = 0\n **/","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar VideoEvents_1 = require('../Helpers/VideoEvents');\nvar HTML_1 = require('../Helpers/HTML');\nvar HelperFunctions_1 = require('../Helpers/HelperFunctions');\nvar BasicElements_1 = require('./BasicElements');\nvar Board_1 = require('./Board');\nvar TimeLine_1 = require('./TimeLine');\nvar PlayerUI = (function (_super) {\n    __extends(PlayerUI, _super);\n    function PlayerUI(id, events) {\n        var _this = this;\n        _super.call(this, \"div\", id + \"-player\");\n        this.id = id;\n        this.events = events;\n        this.isBusy = false;\n        this.tickingInterval = 200;\n        this.isMuted = false;\n        this.AddClass(\"vector-video-wrapper\");\n        this.board = this.CreateBoard();\n        this.AddChild(this.board);\n        this.events.on(VideoEvents_1.VideoEventType.Start, function () { return _this.StartPlaying(); });\n        this.events.on(VideoEvents_1.VideoEventType.Pause, function () { return _this.PausePlaying(); });\n        this.events.on(VideoEvents_1.VideoEventType.ReachEnd, function () { return _this.ReachedEnd(); });\n        this.events.on(VideoEvents_1.VideoEventType.JumpTo, function () { return _this.JumpTo(); });\n        this.events.on(VideoEvents_1.VideoEventType.ClearCanvas, function (c) { return _this.GetHTML().style.backgroundColor = c.CssValue; });\n        this.isPlaying = false;\n        this.reachedEnd = false;\n    }\n    PlayerUI.prototype.CreateControls = function (autohide) {\n        var _this = this;\n        this.timeline = this.CreateTimeLine();\n        this.hidingButton = new BasicElements_1.IconOnlyButton(autohide ? \"icon-show\" : \"icon-hide\", \"\", function (e) { return _this.ToggleAutohiding(); })\n            .AddClasses(\"autohiding-toggle\");\n        this.controls = new BasicElements_1.Panel(\"div\", this.id + \"-controls\")\n            .AddClasses(\"ui-controls\", \"ui-control\")\n            .AddChildren(this.CreateButtonsPanel(), this.timeline, this.CreateTimeStatus(), this.CreateAudioControls());\n        !!autohide && this.controls.AddClass(\"autohide\");\n        this.AddChildren(new BasicElements_1.Panel(\"div\")\n            .AddClass(\"ui-controls-wrapper\")\n            .AddChildren(this.controls, this.hidingButton));\n        this.events.on(VideoEvents_1.VideoEventType.VideoInfoLoaded, function (meta) {\n            _this.videoDuration = meta.Length;\n            _this.totalTime.GetHTML().textContent = HelperFunctions_1.millisecondsToString(meta.Length);\n            _this.timeline.Length = meta.Length;\n        });\n        this.events.on(VideoEvents_1.VideoEventType.BufferStatus, function (seconds) { return _this.timeline.SetBuffer(seconds * 1000); });\n        this.BindKeyboardShortcuts();\n    };\n    PlayerUI.prototype.SetBusyText = function (text) {\n        HTML_1.default.SetAttributes(this.GetHTML(), { \"data-busy-string\": text });\n    };\n    PlayerUI.prototype.BindKeyboardShortcuts = function () {\n        var _this = this;\n        var spacebar = 32;\n        var leftArrow = 37;\n        var rightArrow = 39;\n        var skipTime = 5000;\n        window.onkeyup = function (e) {\n            switch (e.keyCode) {\n                case spacebar:\n                    _this.PlayPause();\n                    break;\n                case leftArrow:\n                    _this.timeline.SkipTo(Math.max(0, _this.Timer.CurrentTime() - skipTime));\n                    break;\n                case rightArrow:\n                    _this.timeline.SkipTo(Math.min(_this.Timer.CurrentTime() + skipTime, _this.videoDuration));\n                    break;\n            }\n        };\n    };\n    PlayerUI.prototype.AcceptCanvas = function (canvas) {\n        this.board.GetHTML().appendChild(canvas);\n    };\n    PlayerUI.prototype.CreateBoard = function () {\n        var _this = this;\n        var board = new Board_1.default(this.id + \"-board\", this.events);\n        board.GetHTML().onclick = function () { return _this.PlayPause(); };\n        return board;\n    };\n    PlayerUI.prototype.CreateButtonsPanel = function () {\n        var _this = this;\n        this.playPauseButton = new BasicElements_1.IconOnlyButton(\"icon-play\", this.Localization.Play, function (e) { return _this.PlayPause(); });\n        return new BasicElements_1.Panel(\"div\")\n            .AddChildren(new BasicElements_1.H2(this.Localization.ControlPlayback), this.playPauseButton)\n            .AddClass(\"ui-controls-panel\");\n    };\n    PlayerUI.prototype.PlayPause = function () {\n        if (this.isBusy || !this.controls)\n            return;\n        if (this.reachedEnd) {\n            this.reachedEnd = false;\n            this.timeline.SkipTo(0);\n            this.events.trigger(VideoEvents_1.VideoEventType.Start);\n            return;\n        }\n        if (this.isPlaying === true) {\n            this.PausePlaying();\n            this.events.trigger(VideoEvents_1.VideoEventType.Pause);\n        }\n        else {\n            this.StartPlaying();\n            this.events.trigger(VideoEvents_1.VideoEventType.Start);\n        }\n    };\n    PlayerUI.prototype.JumpTo = function () {\n        if (!this.controls)\n            return;\n        if (this.reachedEnd === true) {\n            this.reachedEnd = false;\n            this.playPauseButton.ChangeIcon(\"icon-play\");\n        }\n    };\n    PlayerUI.prototype.StartPlaying = function () {\n        var _this = this;\n        if (!this.controls)\n            return;\n        if (this.isPlaying === false) {\n            this.isPlaying = true;\n            this.playPauseButton.ChangeIcon(\"icon-pause\");\n            this.playPauseButton.ChangeContent(this.Localization.Pause);\n            this.AddClass(\"playing\");\n            this.ticking = setInterval(function () { return _this.UpdateCurrentTime(); }, this.tickingInterval);\n        }\n    };\n    PlayerUI.prototype.PausePlaying = function () {\n        if (!this.controls)\n            return;\n        this.isPlaying = false;\n        this.playPauseButton.ChangeIcon(\"icon-play\");\n        this.playPauseButton.ChangeContent(this.Localization.Play);\n        this.RemoveClass(\"playing\");\n        clearInterval(this.ticking);\n    };\n    PlayerUI.prototype.CreateTimeLine = function () {\n        return new TimeLine_1.default(this.id + \"-timeline\", this.events);\n    };\n    PlayerUI.prototype.CreateTimeStatus = function () {\n        this.currentTime = new BasicElements_1.Span(\"0:00\");\n        this.totalTime = new BasicElements_1.Span(\"0:00\");\n        return new BasicElements_1.Panel(\"div\")\n            .AddChildren(new BasicElements_1.H2(this.Localization.TimeStatus), new BasicElements_1.Panel(\"div\")\n            .AddChildren(this.currentTime, new BasicElements_1.Span(\" / \"), this.totalTime)\n            .AddClass(\"ui-time\"))\n            .AddClass(\"ui-controls-panel\");\n    };\n    PlayerUI.prototype.UpdateCurrentTime = function (time) {\n        this.currentTime.GetHTML().textContent = HelperFunctions_1.millisecondsToString(!!time ? time : this.Timer.CurrentTime());\n        this.timeline.Sync(!!time ? time : this.Timer.CurrentTime());\n    };\n    PlayerUI.prototype.ReachedEnd = function () {\n        if (!this.controls)\n            return;\n        this.PausePlaying();\n        this.playPauseButton.ChangeIcon(\"icon-replay\").ChangeContent(this.Localization.Replay);\n        this.reachedEnd = true;\n        this.UpdateCurrentTime();\n    };\n    PlayerUI.prototype.Busy = function () {\n        this.AddClass(\"busy\");\n        this.isBusy = true;\n    };\n    PlayerUI.prototype.Ready = function () {\n        this.RemoveClass(\"busy\");\n        this.isBusy = false;\n    };\n    PlayerUI.prototype.CreateAudioControls = function () {\n        var _this = this;\n        return new BasicElements_1.Panel(\"div\", this.id + \"-audio\")\n            .AddChildren(new BasicElements_1.H2(this.Localization.VolumeControl), new BasicElements_1.Panel(\"div\", this.id + \"-audio-controls\")\n            .AddChildren((this.volumeDownBtn = new BasicElements_1.IconOnlyButton(\"icon-volume-down\", this.Localization.VolumeDown, function (e) { return _this.VolumeDown(); })), (this.volumeUpBtn = new BasicElements_1.IconOnlyButton(\"icon-volume-up\", this.Localization.VolumeUp, function (e) { return _this.VolumeUp(); })), (this.volumeOffBtn = new BasicElements_1.IconOnlyButton(\"icon-volume-off\", this.Localization.Mute, function (e) { return _this.Mute(); })))\n            .AddClass(\"btn-group\"))\n            .AddClasses(\"ui-controls-panel\", \"vector-video-audio-controls\");\n    };\n    PlayerUI.prototype.VolumeUp = function () {\n        this.events.trigger(VideoEvents_1.VideoEventType.VolumeUp);\n    };\n    PlayerUI.prototype.VolumeDown = function () {\n        this.events.trigger(VideoEvents_1.VideoEventType.VolumeDown);\n    };\n    PlayerUI.prototype.Mute = function () {\n        if (!this.isMuted) {\n            HTML_1.default.SetAttributes(this.volumeDownBtn.GetHTML(), { disabled: \"disabled\" });\n            HTML_1.default.SetAttributes(this.volumeUpBtn.GetHTML(), { disabled: \"disabled\" });\n            this.volumeOffBtn.AddClass(\"active\");\n        }\n        else {\n            this.volumeDownBtn.GetHTML().removeAttribute(\"disabled\");\n            this.volumeUpBtn.GetHTML().removeAttribute(\"disabled\");\n            this.volumeOffBtn.RemoveClass(\"active\");\n        }\n        this.isMuted = !this.isMuted;\n        this.events.trigger(VideoEvents_1.VideoEventType.Mute);\n    };\n    PlayerUI.prototype.ToggleAutohiding = function () {\n        if (this.controls.HasClass(\"autohide\")) {\n            this.controls.RemoveClass(\"autohide\");\n            this.hidingButton.ChangeIcon(\"icon-hide\");\n        }\n        else {\n            this.controls.AddClass(\"autohide\");\n            this.hidingButton.ChangeIcon(\"icon-show\");\n        }\n    };\n    return PlayerUI;\n})(BasicElements_1.Panel);\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = PlayerUI;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/lib/UI/PlayerUI.ts\n ** module id = 11\n ** module chunks = 0\n **/","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar VideoEvents_1 = require('../Helpers/VideoEvents');\nvar BasicElements_1 = require('./BasicElements');\nvar HelperFunctions_1 = require('../Helpers/HelperFunctions');\nvar TimeLine = (function (_super) {\n    __extends(TimeLine, _super);\n    function TimeLine(id, events) {\n        var _this = this;\n        _super.call(this, \"div\", id);\n        this.events = events;\n        this.length = 0;\n        this.GetHTML().classList.add(\"ui-progressbar\");\n        var bar = new BasicElements_1.Panel(\"div\");\n        bar.AddClass(\"ui-progress\");\n        bar.AddChild(new BasicElements_1.Div().AddClass(\"ui-current-time\"));\n        this.progresbar = bar;\n        this.AddChild(bar);\n        bar = null;\n        var buffer = new BasicElements_1.Div();\n        buffer.AddClass(\"ui-buffer\");\n        this.bufferbar = buffer;\n        this.AddChild(buffer);\n        buffer = null;\n        this.arrow = new BasicElements_1.Div(\"0:00\");\n        this.arrow.AddClass(\"ui-arrow\");\n        this.AddChild(this.arrow);\n        this.Sync(0);\n        this.GetHTML().onclick = function (e) { return _this.OnClick(e); };\n        this.GetHTML().onmousemove = function (e) { return _this.OnMouseMove(e); };\n    }\n    Object.defineProperty(TimeLine.prototype, \"Length\", {\n        set: function (length) { this.length = length; },\n        enumerable: true,\n        configurable: true\n    });\n    TimeLine.prototype.OnClick = function (e) {\n        var time = (e.clientX - this.GetHTML().clientLeft) / this.GetHTML().clientWidth * this.length;\n        this.SkipTo(time);\n    };\n    TimeLine.prototype.OnMouseMove = function (e) {\n        var progress = (e.clientX - this.GetHTML().clientLeft) / this.GetHTML().clientWidth;\n        var time = HelperFunctions_1.millisecondsToString(progress * this.length);\n        this.arrow.GetHTML().textContent = time;\n        this.arrow.GetHTML().style.left = progress * 100 + \"%\";\n        var rect = this.arrow.GetHTML().getBoundingClientRect();\n        if (rect.left < 0) {\n            this.arrow.GetHTML().style.left = rect.width / 2 + \"px\";\n        }\n        else if (rect.right > this.GetHTML().getBoundingClientRect().right) {\n            this.arrow.GetHTML().style.left = (this.GetHTML().getBoundingClientRect().right - (rect.width / 2)) + \"px\";\n        }\n    };\n    TimeLine.prototype.Sync = function (time) {\n        this.progresbar.GetHTML().style.width = this.length > 0 ? time / this.length * 100 + \"%\" : \"O%\";\n    };\n    TimeLine.prototype.SetBuffer = function (time) {\n        this.bufferbar.GetHTML().style.width = this.length > 0 ? time / this.length * 100 + \"%\" : \"O%\";\n    };\n    TimeLine.prototype.SkipTo = function (time) {\n        this.events.trigger(VideoEvents_1.VideoEventType.JumpTo, time / this.length);\n        this.Sync(time);\n    };\n    return TimeLine;\n})(BasicElements_1.Panel);\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = TimeLine;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/lib/UI/TimeLine.ts\n ** module id = 19\n ** module chunks = 0\n **/"],"sourceRoot":""}